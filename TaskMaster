package managefinal;

import java.time.LocalDate;
import java.util.*;

// Main class for the TaskMaster application with menu-driven interface
public class TaskMaster {
	
    private static TaskManager taskManager = new TaskManager();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        // Display menu
        while (true) {
        	
            displayMenu();
            int choice = getIntInput("Enter your choice: ");
            switch (choice) {
            
                case 1: addNewTask(); break; // List
                case 2: undoAction(); break; // Stack
                case 3: processNextTask(); break; // Queue
                case 4: viewHighestPriorityTasks(); break; // PriorityQueue
                case 5: listAllUniqueTags(); break; // Set
                case 6: viewTasksByStatus(); break; // Map
                case 7: findTasksByDueDate(); break; // BST(TreeMap)
                
                case 0: System.out.println("Exiting..."); 
                return;
                
                default: System.out.println("Invalid choice. Try again.");
            }
        }
    }

    // Displays the menu options
    private static void displayMenu() {
    	
        System.out.println("\nTaskMaster Menu:");
        System.out.println("1. Add a New Task");
        System.out.println("2. Undo Last");
        System.out.println("3. Process Next Task");
        System.out.println("4. View Highest Priority Tasks");
        System.out.println("5. List all Unique Tasks");
        System.out.println("6. View Tasks by Status");
        System.out.println("7. Find Tasks Due on a Specific date");
        System.out.println("0. Exit");
    }

    // Integer input from user
    private static int getIntInput(String prompt) {
    	
        System.out.println(prompt);
        
        try {
        	
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    // Add new task based on user input
    private static void addNewTask() {
    	
        // Uses List: Adds task to allTasks
        System.out.println("Enter task name: ");
        String name = scanner.nextLine();
        System.out.println("Enter description: ");
        String desc = scanner.nextLine();
        System.out.println("Enter due date (YYYY-MM-DD): ");
        LocalDate dueDate;
        
        try {
        	
            dueDate = LocalDate.parse(scanner.nextLine());
            
        } catch (Exception e) {
        	
            System.out.println("Invalid date format. Using today.");
            dueDate = LocalDate.now();
        }
        
        int priority = getIntInput("Enter priority (1=highest): ");
        
        if (priority < 1) priority = 1;
        System.out.println("Enter status (To Do, In Progress, Done): ");
        String status = scanner.nextLine();
        
        // Status input case-insensitively
        if (status.equalsIgnoreCase("to do") || status.equalsIgnoreCase("in progress") || status.equalsIgnoreCase("done")) {
        	
            if (status.equalsIgnoreCase("to do")) status = "To Do";
            else if (status.equalsIgnoreCase("in progress")) status = "In Progress";
            else if (status.equalsIgnoreCase("done")) status = "Done";
            
        } else {
        	
            status = "To Do";
        }
        
        System.out.println("Enter tags (comma-separated): ");
        Set<String> tags = new HashSet<>(Arrays.asList(scanner.nextLine().split(",\\s*")));
        Task task = new Task(name, desc, dueDate, priority, status, tags);
        taskManager.addTask(task, true);
        System.out.println("Task added: " + task);
    }

    // Undoes the last action
    private static void undoAction() {
    	
        // Uses Stack: Undoes last action via undoStack
        taskManager.undo();
        System.out.println("Last action undone.");
    }

    // Processes the next task in the queue
    private static void processNextTask() {
    	
        // Uses Queue: Processes next task
        Queue<Task> workQueue = taskManager.getWorkQueue();
        
        if (!workQueue.isEmpty()) {
        	
            Task task = workQueue.peek();
            System.out.println("Next task: " + task);
            System.out.println("Mark as Done? (yes/no): ");
            
            if (scanner.nextLine().equalsIgnoreCase("yes")) {
            	
                workQueue.poll();
                taskManager.updateTaskStatus(task, "Done");
                System.out.println("Task marked as Done.");
            }
            
        } else {
        	
            System.out.println("No tasks to process.");
        }
    }

    // Displays the highest priority tasks
    private static void viewHighestPriorityTasks() {
    	
        // Uses PriorityQueue: Shows highest priority tasks
        List<Task> topTasks = taskManager.getTopPriorityTasks(5);
        
        System.out.println("Top 5 Priority Tasks:");
        
        for (Task task : topTasks) {
        	
            System.out.println(task);
        }
    }

    // Lists all unique tags across tasks
    private static void listAllUniqueTags() {
    	
        // Uses Set: Displays unique tags
        Set<String> uniqueTags = taskManager.getAllUniqueTags();
        System.out.println("Unique Tags: " + uniqueTags);
    }

    // Displays tasks by status
    private static void viewTasksByStatus() {
    	
        // Uses Map: tasks by status
        System.out.print("Enter status to view: ");
        String status = scanner.nextLine();
        List<Task> tasks = taskManager.getTasksByStatus(status);
        System.out.println("Tasks with status '" + status + "': " + tasks);
    }

    // Finds tasks due on a specific date
    private static void findTasksByDueDate() {
    	
        // BST: Finds tasks by due date via TreeMap
        System.out.print("Enter due date (YYYY-MM-DD): ");
        LocalDate date;
        
        try {
        	
            date = LocalDate.parse(scanner.nextLine());
            
        } catch (Exception e) {
        	
            System.out.println("Invalid date format.");
            return;
        }
        
        List<Task> tasks = taskManager.getTasksByDate(date);
        System.out.println("Tasks due on " + date + ": " + tasks);
    }
}
